# coding: utf-8

"""
    PDF Generator API

    # Introduction PDF Generator API allows you easily generate transactional PDF documents and reduce the development and support costs by enabling your users to create and manage their document templates using a browser-based drag-and-drop document editor.  The PDF Generator API features a web API architecture, allowing you to code in the language of your choice. This API supports the JSON media type, and uses UTF-8 character encoding.  # Authentication The PDF Generator API uses __JSON Web Tokens (JWT)__ to authenticate all API requests. These tokens offer a method to establish secure server-to-server authentication by transferring a compact JSON object with a signed payload of your accountâ€™s API Key and Secret. When authenticating to the PDF Generator API, a JWT should be generated uniquely by a __server-side application__ and included as a __Bearer Token__ in the header of each request.  <SecurityDefinitions />  ## Accessing your API Key and Secret You can find your __API Key__ and __API Secret__ from the __Account Settings__ page after you login to PDF Generator API [here](https://pdfgeneratorapi.com/login).  ## Creating a JWT JSON Web Tokens are composed of three sections: a header, a payload (containing a claim set), and a signature. The header and payload are JSON objects, which are serialized to UTF-8 bytes, then encoded using base64url encoding.  The JWT's header, payload, and signature are concatenated with periods (.). As a result, a JWT typically takes the following form: ``` {Base64url encoded header}.{Base64url encoded payload}.{Base64url encoded signature} ```  We recommend and support libraries provided on [jwt.io](https://jwt.io/). While other libraries can create JWT, these recommended libraries are the most robust.  ### Header Property `alg` defines which signing algorithm is being used. PDF Generator API users HS256. Property `typ` defines the type of token and it is always JWT. ``` {   \"alg\": \"HS256\",   \"typ\": \"JWT\" } ```  ### Payload The second part of the token is the payload, which contains the claims  or the pieces of information being passed about the user and any metadata required. It is mandatory to specify the following claims: * issuer (`iss`): Your API key * subject (`sub`): Workspace identifier  You can also specify the token expiration time (`exp`) which is timestamp in seconds since Epoch (unix epoch time). It is highly recommended to set the exp timestamp for a short period, i.e. a matter of seconds. This way, if a token is intercepted or shared, the token will only be valid for a short period of time.  ``` {   \"iss\": \"ad54aaff89ffdfeff178bb8a8f359b29fcb20edb56250b9f584aa2cb0162ed4a\",   \"sub\": \"demo.example@actualreports.com\",   \"exp\": 1586112639 } ```  ### Signature To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that. The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, it can also verify that the sender of the JWT is who it says it is. ``` HMACSHA256(     base64UrlEncode(header) + \".\" +     base64UrlEncode(payload),     API_SECRET) ```  ### Putting all together The output is three Base64-URL strings separated by dots. The following shows a JWT that has the previous header and payload encoded, and it is signed with a secret. ``` eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZDU0YWFmZjg5ZmZkZmVmZjE3OGJiOGE4ZjM1OWIyOWZjYjIwZWRiNTYyNTBiOWY1ODRhYTJjYjAxNjJlZDRhIiwic3ViIjoiZGVtby5leGFtcGxlQGFjdHVhbHJlcG9ydHMuY29tIn0.SxO-H7UYYYsclS8RGWO1qf0z1cB1m73wF9FLl9RCc1Q  // Base64 encoded header: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 // Base64 encoded payload: eyJpc3MiOiJhZDU0YWFmZjg5ZmZkZmVmZjE3OGJiOGE4ZjM1OWIyOWZjYjIwZWRiNTYyNTBiOWY1ODRhYTJjYjAxNjJlZDRhIiwic3ViIjoiZGVtby5leGFtcGxlQGFjdHVhbHJlcG9ydHMuY29tIn0 // Signature: SxO-H7UYYYsclS8RGWO1qf0z1cB1m73wF9FLl9RCc1Q ```  ## Testing with JWTs You can create a temporary token in [Account Settings](https://pdfgeneratorapi.com/account/organization) page after you login to PDF Generator API. The generated token uses your email address as the subject (`sub`) value and is valid for __5 minutes__. You can also use [jwt.io](https://jwt.io/) to generate test tokens for your API calls. These test tokens should never be used in production applications.  # Libraries and SDKs ## Postman Collection We have created a [Postman](https://www.postman.com) Collection so you can easily test all the API endpoints wihtout developing and code. You can download the collection [here](https://app.getpostman.com/run-collection/8f99146f64819f3e6db5) or just click the button below.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/8f99146f64819f3e6db5)   # noqa: E501

    The version of the OpenAPI document: 3.1.0
    Contact: support@pdfgeneratorapi.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pdf_generator_api_client.configuration import Configuration


class TemplateDefinitionNew(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'tags': 'list[str]',
        'is_draft': 'bool',
        'layout': 'TemplateDefinitionNewLayout',
        'pages': 'list[TemplateDefinitionNewPages]'
    }

    attribute_map = {
        'name': 'name',
        'tags': 'tags',
        'is_draft': 'isDraft',
        'layout': 'layout',
        'pages': 'pages'
    }

    def __init__(self, name=None, tags=None, is_draft=None, layout=None, pages=None, local_vars_configuration=None):  # noqa: E501
        """TemplateDefinitionNew - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._tags = None
        self._is_draft = None
        self._layout = None
        self._pages = None
        self.discriminator = None

        self.name = name
        if tags is not None:
            self.tags = tags
        if is_draft is not None:
            self.is_draft = is_draft
        if layout is not None:
            self.layout = layout
        if pages is not None:
            self.pages = pages

    @property
    def name(self):
        """Gets the name of this TemplateDefinitionNew.  # noqa: E501

        Template name  # noqa: E501

        :return: The name of this TemplateDefinitionNew.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateDefinitionNew.

        Template name  # noqa: E501

        :param name: The name of this TemplateDefinitionNew.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this TemplateDefinitionNew.  # noqa: E501

        A list of tags assigned to a template  # noqa: E501

        :return: The tags of this TemplateDefinitionNew.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TemplateDefinitionNew.

        A list of tags assigned to a template  # noqa: E501

        :param tags: The tags of this TemplateDefinitionNew.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def is_draft(self):
        """Gets the is_draft of this TemplateDefinitionNew.  # noqa: E501

        Indicates if the template is a draft or published.  # noqa: E501

        :return: The is_draft of this TemplateDefinitionNew.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this TemplateDefinitionNew.

        Indicates if the template is a draft or published.  # noqa: E501

        :param is_draft: The is_draft of this TemplateDefinitionNew.  # noqa: E501
        :type: bool
        """

        self._is_draft = is_draft

    @property
    def layout(self):
        """Gets the layout of this TemplateDefinitionNew.  # noqa: E501


        :return: The layout of this TemplateDefinitionNew.  # noqa: E501
        :rtype: TemplateDefinitionNewLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this TemplateDefinitionNew.


        :param layout: The layout of this TemplateDefinitionNew.  # noqa: E501
        :type: TemplateDefinitionNewLayout
        """

        self._layout = layout

    @property
    def pages(self):
        """Gets the pages of this TemplateDefinitionNew.  # noqa: E501

        Defines page or label size, margins and components on page or label  # noqa: E501

        :return: The pages of this TemplateDefinitionNew.  # noqa: E501
        :rtype: list[TemplateDefinitionNewPages]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this TemplateDefinitionNew.

        Defines page or label size, margins and components on page or label  # noqa: E501

        :param pages: The pages of this TemplateDefinitionNew.  # noqa: E501
        :type: list[TemplateDefinitionNewPages]
        """

        self._pages = pages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateDefinitionNew):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplateDefinitionNew):
            return True

        return self.to_dict() != other.to_dict()
